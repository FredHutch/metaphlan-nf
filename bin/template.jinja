<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>stlite app</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@stlite/mountable@0.6.0/build/stlite.css"
    />
    <style>
      footer {        
        visibility: hidden;
      }
      footer:after {
        content:'Based on github.com/FredHutch/stlite-template'; 
        visibility: visible;
        display: block;
        position: relative;
        padding: 5px;
        top: 2px;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script src="https://cdn.jsdelivr.net/npm/@stlite/mountable@0.6.0/build/stlite.js"></script>
    <script>
        stlite.mount(
            {
                requirements: ["click", "scipy", "plotly", "pandas"],
                entrypoint: "app.py",
                files: {
                    "app.py": `
import streamlit as st
import pandas as pd
from io import StringIO
import plotly.express as px
from scipy.cluster import hierarchy

st.title("Microbiome Composition")

inputs = pd.read_csv(
    StringIO("""{{ data }}"""))

show_level = st.sidebar.selectbox(
    "Taxonomic Level",
    index=0,
    options=[
        "species",
        "genus",
        "family",
        "order",
        "class",
        "phylum"
    ]
)

min_abund = st.sidebar.number_input(
    "Minimum Abundance (0 - 100%)",
    min_value=0,
    max_value=100,
    value=1,
    step=1
)

plot_df = inputs.query(
    f"level == '{show_level}'"
)

orgs = set(plot_df.query(
    f"relative_abundance >= {min_abund}"
)["org_name"].tolist())

plot_df = plot_df.loc[
    plot_df["org_name"].isin(orgs)
].pivot_table(
    index="org_name",
    columns="name",
    values="relative_abundance"
).fillna(
    0
)

plot_df = plot_df.reindex(
    index=plot_df.sum(
        axis=1
    ).sort_values(
        ascending=False
    ).index,
    columns=plot_df.columns.values[
        hierarchy.leaves_list(
            hierarchy.linkage(
                plot_df.T,
                method="ward",
                metric="euclidean"
            )
        )
    ]
)

plot_df.index.rename("Organism", inplace=True)
plot_df.columns.rename("Sample", inplace=True)
fig = px.imshow(
    plot_df,
    color_continuous_scale="RdBu_r",
    zmin=0,
    zmax=100,
    text_auto=True,
    aspect="auto"
)

st.plotly_chart(fig)
`
                }
            },
            document.getElementById("root")
        )
    </script>
  </body>
</html>